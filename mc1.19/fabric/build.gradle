plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    maven { url "https://maven.terraformersmc.com" }
}

loom {
    accessWidenerPath = project("${parent.path}:common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

sourceSets {
    main {
        java {
            srcDir "${project(":crossversion:common").projectDir}/src/main/java"
        }
        resources {
            srcDir "${project(":crossversion:common").projectDir}/src/main/resources"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
//    modApi "dev.architectury:architectury-fabric:${architectury_version}"

    modImplementation "com.terraformersmc:modmenu:4.0.0"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    // for testing some unrecognized UIs
//    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:7.3.443"

    common(project(path: "${parent.path}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: "${parent.path}:common", configuration: "transformProductionFabric")) { transitive false }

    common(project(path: "${parent.path}:fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: "${parent.path}:fabric-like", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    from project("${parent.path}:common").sourceSets.main.resources
    from project("${parent.path}:fabric-like").sourceSets.main.resources
//    from project(":crossversion:common").sourceSets.main.resources
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project("${parent.path}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = maven_artifact_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
